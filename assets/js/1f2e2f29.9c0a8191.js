"use strict";(self.webpackChunkexpenses_docs=self.webpackChunkexpenses_docs||[]).push([[4318],{8453:(e,r,n)=>{n.d(r,{R:()=>c,x:()=>d});var s=n(6540);const t={},i=s.createContext(t);function c(e){const r=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(i.Provider,{value:r},e.children)}},9315:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>d,default:()=>a,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"HLD/2.2 Microservices/Service Architecture","title":"Service Architecture","description":"Yes, Onion Architecture is an alternative to Hexagonal Architecture, and they share many similarities. However, they are not exactly the same. Let\u2019s explore the key differences, similarities, and other architectural alternatives.","source":"@site/docs/2. HLD/2.2 Microservices/Service Architecture.md","sourceDirName":"2. HLD/2.2 Microservices","slug":"/HLD/2.2 Microservices/Service Architecture","permalink":"/expenses-docs/docs/HLD/2.2 Microservices/Service Architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/2. HLD/2.2 Microservices/Service Architecture.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Microservices","permalink":"/expenses-docs/docs/HLD/2.2 Microservices/Microservices"},"next":{"title":"StatementIngestionService","permalink":"/expenses-docs/docs/HLD/2.3 BatchServices/StatementIngestionService"}}');var t=n(4848),i=n(8453);const c={},d=void 0,l={},o=[{value:"1\ufe0f\u20e3 <strong>Onion Architecture</strong>",id:"1\ufe0f\u20e3-onion-architecture",level:3},{value:"2\ufe0f\u20e3 <strong>Layered Architecture (N-Tier)</strong>",id:"2\ufe0f\u20e3-layered-architecture-n-tier",level:3},{value:"3\ufe0f\u20e3 <strong>Microkernel Architecture (Plugin-Based Architecture)</strong>",id:"3\ufe0f\u20e3-microkernel-architecture-plugin-based-architecture",level:3},{value:"4\ufe0f\u20e3 <strong>CQRS (Command Query Responsibility Segregation)</strong>",id:"4\ufe0f\u20e3-cqrs-command-query-responsibility-segregation",level:3},{value:"5\ufe0f\u20e3 <strong>Event-Driven Architecture (EDA)</strong>",id:"5\ufe0f\u20e3-event-driven-architecture-eda",level:3},{value:"<strong>1\ufe0f\u20e3 Onion Architecture (Alternative to Hexagonal Architecture)</strong>",id:"1\ufe0f\u20e3-onion-architecture-alternative-to-hexagonal-architecture",level:2},{value:"<strong>\ud83d\udee0 Layers in Onion Architecture</strong>",id:"-layers-in-onion-architecture",level:3},{value:"<strong>\ud83d\udd04 Key Differences: Hexagonal vs. Onion</strong>",id:"-key-differences-hexagonal-vs-onion",level:3},{value:"<strong>\u2705 When to Use Onion Architecture?</strong>",id:"-when-to-use-onion-architecture",level:3},{value:"<strong>2\ufe0f\u20e3 Layered Architecture (N-Tier)</strong>",id:"2\ufe0f\u20e3-layered-architecture-n-tier-1",level:2},{value:"<strong>\u26a0\ufe0f Issues with Layered Architecture</strong>",id:"\ufe0f-issues-with-layered-architecture",level:3},{value:"<strong>3\ufe0f\u20e3 Microkernel Architecture (Plugin-Based Architecture)</strong>",id:"3\ufe0f\u20e3-microkernel-architecture-plugin-based-architecture-1",level:2},{value:"<strong>\ud83d\udee0 Example: Accounting System</strong>",id:"-example-accounting-system",level:3},{value:"<strong>4\ufe0f\u20e3 CQRS (Command Query Responsibility Segregation)</strong>",id:"4\ufe0f\u20e3-cqrs-command-query-responsibility-segregation-1",level:2},{value:"<strong>5\ufe0f\u20e3 Event-Driven Architecture (EDA)</strong>",id:"5\ufe0f\u20e3-event-driven-architecture-eda-1",level:2},{value:"<strong>\ud83d\udee0 Example: Banking System</strong>",id:"-example-banking-system",level:3}];function h(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:["Yes, ",(0,t.jsx)(r.strong,{children:"Onion Architecture"})," is an alternative to ",(0,t.jsx)(r.strong,{children:"Hexagonal Architecture"}),", and they share many similarities. However, they are ",(0,t.jsx)(r.strong,{children:"not exactly the same"}),". Let\u2019s explore the key differences, similarities, and other architectural alternatives."]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h1,{id:"-alternatives-to-hexagonal-architecture",children:(0,t.jsx)(r.strong,{children:"\ud83d\udd0d Alternatives to Hexagonal Architecture"})}),"\n",(0,t.jsxs)(r.h3,{id:"1\ufe0f\u20e3-onion-architecture",children:["1\ufe0f\u20e3 ",(0,t.jsx)(r.strong,{children:"Onion Architecture"})]}),"\n",(0,t.jsxs)(r.h3,{id:"2\ufe0f\u20e3-layered-architecture-n-tier",children:["2\ufe0f\u20e3 ",(0,t.jsx)(r.strong,{children:"Layered Architecture (N-Tier)"})]}),"\n",(0,t.jsxs)(r.h3,{id:"3\ufe0f\u20e3-microkernel-architecture-plugin-based-architecture",children:["3\ufe0f\u20e3 ",(0,t.jsx)(r.strong,{children:"Microkernel Architecture (Plugin-Based Architecture)"})]}),"\n",(0,t.jsxs)(r.h3,{id:"4\ufe0f\u20e3-cqrs-command-query-responsibility-segregation",children:["4\ufe0f\u20e3 ",(0,t.jsx)(r.strong,{children:"CQRS (Command Query Responsibility Segregation)"})]}),"\n",(0,t.jsxs)(r.h3,{id:"5\ufe0f\u20e3-event-driven-architecture-eda",children:["5\ufe0f\u20e3 ",(0,t.jsx)(r.strong,{children:"Event-Driven Architecture (EDA)"})]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"1\ufe0f\u20e3-onion-architecture-alternative-to-hexagonal-architecture",children:(0,t.jsx)(r.strong,{children:"1\ufe0f\u20e3 Onion Architecture (Alternative to Hexagonal Architecture)"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"\ud83d\udd39 Definition:"}),"\r\nOnion Architecture, introduced by ",(0,t.jsx)(r.strong,{children:"Jeffrey Palermo"}),", is similar to Hexagonal Architecture but emphasizes ",(0,t.jsx)(r.strong,{children:"strict dependency rules"}),"\u2014",(0,t.jsx)(r.strong,{children:"outer layers depend on inner layers, but not vice versa"}),"."]}),"\n",(0,t.jsx)(r.h3,{id:"-layers-in-onion-architecture",children:(0,t.jsx)(r.strong,{children:"\ud83d\udee0 Layers in Onion Architecture"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"/OnionArchitecture\r\n \u251c\u2500\u2500 /Core\r\n \u2502   \u251c\u2500\u2500 /Domain           # Entities, Aggregates, Value Objects\r\n \u2502   \u251c\u2500\u2500 /Application      # Business Logic (Use Cases, Services)\r\n \u251c\u2500\u2500 /Infrastructure      # Database, API Clients, Messaging\r\n \u251c\u2500\u2500 /WebAPI              # Controllers (Entry Point)\n"})}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:(0,t.jsx)(r.strong,{children:"Layer"})}),(0,t.jsx)(r.th,{children:(0,t.jsx)(r.strong,{children:"Responsibility"})}),(0,t.jsx)(r.th,{children:(0,t.jsx)(r.strong,{children:"Depends On"})})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Domain (Core)"})}),(0,t.jsx)(r.td,{children:"Business rules, entities, aggregates, value objects"}),(0,t.jsx)(r.td,{children:"\u274c None"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Application (Use Cases)"})}),(0,t.jsx)(r.td,{children:"Orchestrates domain logic (Application services, DTOs)"}),(0,t.jsx)(r.td,{children:"\u2705 Domain"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Infrastructure"})}),(0,t.jsx)(r.td,{children:"DB, repositories, external services, event bus"}),(0,t.jsx)(r.td,{children:"\u2705 Application"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Presentation (API/UI)"})}),(0,t.jsx)(r.td,{children:"REST API, CLI, UI"}),(0,t.jsx)(r.td,{children:"\u2705 Application"})]})]})]}),"\n",(0,t.jsx)(r.h3,{id:"-key-differences-hexagonal-vs-onion",children:(0,t.jsx)(r.strong,{children:"\ud83d\udd04 Key Differences: Hexagonal vs. Onion"})}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Feature"}),(0,t.jsx)(r.th,{children:"Hexagonal Architecture"}),(0,t.jsx)(r.th,{children:"Onion Architecture"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Focus"})}),(0,t.jsx)(r.td,{children:"Separation via Ports & Adapters"}),(0,t.jsx)(r.td,{children:"Dependency Inversion"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Dependency Flow"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:"Inward"})," (Core does not depend on infrastructure)"]}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:"Strictly Inward"})," (Outer layers depend on inner layers)"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Use Case Isolation"})}),(0,t.jsx)(r.td,{children:"Uses Adapters to isolate business logic"}),(0,t.jsxs)(r.td,{children:["Uses ",(0,t.jsx)(r.strong,{children:"Application Services"})," to isolate business logic"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Testing"})}),(0,t.jsx)(r.td,{children:"High testability (mock external dependencies)"}),(0,t.jsx)(r.td,{children:"High testability (Core domain is fully independent)"})]})]})]}),"\n",(0,t.jsx)(r.h3,{id:"-when-to-use-onion-architecture",children:(0,t.jsx)(r.strong,{children:"\u2705 When to Use Onion Architecture?"})}),"\n",(0,t.jsxs)(r.p,{children:["\u2714\ufe0f If you want ",(0,t.jsx)(r.strong,{children:"strict dependency inversion"})," rules.\r\n\u2714\ufe0f If you have ",(0,t.jsx)(r.strong,{children:"complex business logic"})," and want to keep the core ",(0,t.jsx)(r.strong,{children:"pure"}),".\r\n\u2714\ufe0f If you need ",(0,t.jsx)(r.strong,{children:"high testability"})," without framework dependencies."]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"2\ufe0f\u20e3-layered-architecture-n-tier-1",children:(0,t.jsx)(r.strong,{children:"2\ufe0f\u20e3 Layered Architecture (N-Tier)"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"\ud83d\udd39 Definition:"}),"\r\nA ",(0,t.jsx)(r.strong,{children:"traditional architecture"})," with layers stacked on top of each other. The ",(0,t.jsx)(r.strong,{children:"UI layer calls the Service layer, which calls the Repository layer, which calls the Database layer"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"/LayeredArchitecture\r\n \u251c\u2500\u2500 /Presentation   # API / UI\r\n \u251c\u2500\u2500 /Application    # Business Logic\r\n \u251c\u2500\u2500 /DataAccess     # Repositories\r\n \u251c\u2500\u2500 /Infrastructure # Database, Messaging\n"})}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:(0,t.jsx)(r.strong,{children:"Layer"})}),(0,t.jsx)(r.th,{children:(0,t.jsx)(r.strong,{children:"Responsibility"})})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Presentation (UI/API)"})}),(0,t.jsx)(r.td,{children:"Handles HTTP requests, UI logic"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Application (Service Layer)"})}),(0,t.jsx)(r.td,{children:"Implements business logic (e.g., AccountService)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Data Access (Repository Layer)"})}),(0,t.jsx)(r.td,{children:"Handles database interactions"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Infrastructure"})}),(0,t.jsx)(r.td,{children:"Handles external services (messaging, APIs, logs)"})]})]})]}),"\n",(0,t.jsx)(r.h3,{id:"\ufe0f-issues-with-layered-architecture",children:(0,t.jsx)(r.strong,{children:"\u26a0\ufe0f Issues with Layered Architecture"})}),"\n",(0,t.jsxs)(r.p,{children:["\u274c ",(0,t.jsx)(r.strong,{children:"Tightly coupled"})," \u2013 Business logic depends on the database layer.\r\n\u274c ",(0,t.jsx)(r.strong,{children:"Hard to test"})," \u2013 Because database logic is mixed into services.\r\n\u274c ",(0,t.jsx)(r.strong,{children:"Low flexibility"})," \u2013 If the database changes, the entire application is affected."]}),"\n",(0,t.jsxs)(r.p,{children:["\u2705 ",(0,t.jsx)(r.strong,{children:"Best Use Case:"})," Simple applications without complex domain logic."]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"3\ufe0f\u20e3-microkernel-architecture-plugin-based-architecture-1",children:(0,t.jsx)(r.strong,{children:"3\ufe0f\u20e3 Microkernel Architecture (Plugin-Based Architecture)"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"\ud83d\udd39 Definition:"}),"\r\nMicrokernel (or ",(0,t.jsx)(r.strong,{children:"Plugin-Based Architecture"}),") is best for ",(0,t.jsx)(r.strong,{children:"extensible systems"}),". It has a ",(0,t.jsx)(r.strong,{children:"core system"})," with ",(0,t.jsx)(r.strong,{children:"optional plug-ins"})," for additional functionality."]}),"\n",(0,t.jsx)(r.h3,{id:"-example-accounting-system",children:(0,t.jsx)(r.strong,{children:"\ud83d\udee0 Example: Accounting System"})}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:(0,t.jsx)(r.strong,{children:"Component"})}),(0,t.jsx)(r.th,{children:(0,t.jsx)(r.strong,{children:"Example"})})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Core"})}),(0,t.jsx)(r.td,{children:"Account Management, Transactions"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Plugins"})}),(0,t.jsx)(r.td,{children:"Budgeting Plugin, Loan Processing Plugin"})]})]})]}),"\n",(0,t.jsxs)(r.p,{children:["\u2705 ",(0,t.jsx)(r.strong,{children:"Best Use Case:"})," ",(0,t.jsx)(r.strong,{children:"Extensible applications"})," (e.g., IDEs, CMS, ERP systems)."]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"4\ufe0f\u20e3-cqrs-command-query-responsibility-segregation-1",children:(0,t.jsx)(r.strong,{children:"4\ufe0f\u20e3 CQRS (Command Query Responsibility Segregation)"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"\ud83d\udd39 Definition:"}),"\r\nSeparates ",(0,t.jsx)(r.strong,{children:"write operations (commands)"})," from ",(0,t.jsx)(r.strong,{children:"read operations (queries)"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"/CQRS\r\n \u251c\u2500\u2500 /Commands       # Handles writes (Create, Update, Delete)\r\n \u251c\u2500\u2500 /Queries        # Handles reads (Get account details)\n"})}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:(0,t.jsx)(r.strong,{children:"Layer"})}),(0,t.jsx)(r.th,{children:(0,t.jsx)(r.strong,{children:"Responsibility"})})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Commands (Write Models)"})}),(0,t.jsxs)(r.td,{children:["Handles ",(0,t.jsx)(r.strong,{children:"state-changing"})," operations (Create, Update, Delete)"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Queries (Read Models)"})}),(0,t.jsxs)(r.td,{children:["Handles ",(0,t.jsx)(r.strong,{children:"read operations"})," (Get account details)"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Event Store"})}),(0,t.jsx)(r.td,{children:"Stores events when data changes"})]})]})]}),"\n",(0,t.jsxs)(r.p,{children:["\u2705 ",(0,t.jsx)(r.strong,{children:"Best Use Case:"})," High-performance systems that require ",(0,t.jsx)(r.strong,{children:"separate read/write models"}),"."]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"5\ufe0f\u20e3-event-driven-architecture-eda-1",children:(0,t.jsx)(r.strong,{children:"5\ufe0f\u20e3 Event-Driven Architecture (EDA)"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"\ud83d\udd39 Definition:"}),"\r\nInstead of direct service calls, ",(0,t.jsx)(r.strong,{children:"services communicate via events"}),"."]}),"\n",(0,t.jsx)(r.h3,{id:"-example-banking-system",children:(0,t.jsx)(r.strong,{children:"\ud83d\udee0 Example: Banking System"})}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:(0,t.jsx)(r.strong,{children:"Event Producer"})}),(0,t.jsx)(r.th,{children:(0,t.jsx)(r.strong,{children:"Event"})}),(0,t.jsx)(r.th,{children:(0,t.jsx)(r.strong,{children:"Event Consumer"})})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Account Service"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ACCOUNT_CREATED"})}),(0,t.jsx)(r.td,{children:"Notification Service"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Transactions Service"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"TRANSACTION_COMPLETED"})}),(0,t.jsx)(r.td,{children:"Fraud Detection Service"})]})]})]}),"\n",(0,t.jsxs)(r.p,{children:["\u2705 ",(0,t.jsx)(r.strong,{children:"Best Use Case:"})," ",(0,t.jsx)(r.strong,{children:"Asynchronous event-driven systems"})," with ",(0,t.jsx)(r.strong,{children:"microservices"}),"."]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h1,{id:"-which-architecture-to-choose",children:(0,t.jsx)(r.strong,{children:"\ud83c\udfaf Which Architecture to Choose?"})}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:(0,t.jsx)(r.strong,{children:"Use Case"})}),(0,t.jsx)(r.th,{children:(0,t.jsx)(r.strong,{children:"Recommended Architecture"})})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"General Microservices"})}),(0,t.jsxs)(r.td,{children:["\u2705 ",(0,t.jsx)(r.strong,{children:"Hexagonal / Onion Architecture"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Strict Dependency Management"})}),(0,t.jsxs)(r.td,{children:["\u2705 ",(0,t.jsx)(r.strong,{children:"Onion Architecture"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Simple Applications"})}),(0,t.jsxs)(r.td,{children:["\u2705 ",(0,t.jsx)(r.strong,{children:"Layered Architecture"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Extensible Applications"})}),(0,t.jsxs)(r.td,{children:["\u2705 ",(0,t.jsx)(r.strong,{children:"Microkernel Architecture"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"High Read/Write Separation"})}),(0,t.jsxs)(r.td,{children:["\u2705 ",(0,t.jsx)(r.strong,{children:"CQRS"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Asynchronous Event Systems"})}),(0,t.jsxs)(r.td,{children:["\u2705 ",(0,t.jsx)(r.strong,{children:"Event-Driven Architecture"})]})]})]})]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h1,{id:"-conclusion",children:(0,t.jsx)(r.strong,{children:"\ud83d\ude80 Conclusion"})}),"\n",(0,t.jsxs)(r.p,{children:["\ud83d\udd39 ",(0,t.jsx)(r.strong,{children:"Hexagonal and Onion"})," are great for microservices because they ",(0,t.jsx)(r.strong,{children:"separate business logic from infrastructure"}),".\r\n\ud83d\udd39 ",(0,t.jsx)(r.strong,{children:"CQRS and Event-Driven"})," help in ",(0,t.jsx)(r.strong,{children:"scalability and high-performance systems"}),".\r\n\ud83d\udd39 ",(0,t.jsx)(r.strong,{children:"Layered Architecture"})," is simple but ",(0,t.jsx)(r.strong,{children:"not recommended"})," for complex systems."]}),"\n",(0,t.jsxs)(r.p,{children:["Would you like an ",(0,t.jsx)(r.strong,{children:"example .NET project"})," following ",(0,t.jsx)(r.strong,{children:"Onion or Hexagonal Architecture"}),"? \ud83d\ude80"]})]})}function a(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);